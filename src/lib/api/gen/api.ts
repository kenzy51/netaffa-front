/* tslint:disable */
/* eslint-disable */
/**
 * 159.223.90.175 API
 * API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: baha@dataxway.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * 
     * @type {number}
     * @memberof Article
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'title': string;
    /**
     * Leave blank to auto-generate a unique slug.
     * @type {string}
     * @memberof Article
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'seo_text': string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface Branch
 */
export interface Branch {
    /**
     * 
     * @type {number}
     * @memberof Branch
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'name': string;
    /**
     * Leave blank to auto-generate a unique slug.
     * @type {string}
     * @memberof Branch
     */
    'slug'?: string;
    /**
     * 
     * @type {Array<BranchContactInline>}
     * @memberof Branch
     */
    'contacts'?: Array<BranchContactInline>;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'web_site'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'facebook'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'instagram'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'twitter'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'telegram'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'youtube'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'whatsapp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'schedule': string;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof Branch
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof Branch
     */
    'longitude': number;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface BranchContactInline
 */
export interface BranchContactInline {
    /**
     * 
     * @type {number}
     * @memberof BranchContactInline
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BranchContactInline
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof BranchContactInline
     */
    'phone_number_ru'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BranchContactInline
     */
    'phone_number_en'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BranchContactInline
     */
    'phone_number_uz'?: string | null;
}
/**
 * 
 * @export
 * @interface Camp
 */
export interface Camp {
    /**
     * 
     * @type {number}
     * @memberof Camp
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'name': string;
    /**
     * Leave blank to auto-generate a unique slug.
     * @type {string}
     * @memberof Camp
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof Camp
     */
    'city': number;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'city_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'age_range': string;
    /**
     * 
     * @type {number}
     * @memberof Camp
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'web_site'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'facebook'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'instagram'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'twitter'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'telegram'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'youtube'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'whatsapp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'end_date': string;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Camp
     */
    'seo_text': string;
    /**
     * 
     * @type {Array<CampBannerInline>}
     * @memberof Camp
     */
    'banners'?: Array<CampBannerInline>;
    /**
     * 
     * @type {Array<CampImageInline>}
     * @memberof Camp
     */
    'images'?: Array<CampImageInline>;
    /**
     * 
     * @type {Array<CampRequirementInline>}
     * @memberof Camp
     */
    'requirements'?: Array<CampRequirementInline>;
    /**
     * 
     * @type {Array<CampContactInline>}
     * @memberof Camp
     */
    'contacts'?: Array<CampContactInline>;
    /**
     * 
     * @type {Array<CampAddressInline>}
     * @memberof Camp
     */
    'addresses'?: Array<CampAddressInline>;
}
/**
 * 
 * @export
 * @interface CampAddressInline
 */
export interface CampAddressInline {
    /**
     * 
     * @type {number}
     * @memberof CampAddressInline
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CampAddressInline
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof CampAddressInline
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof CampAddressInline
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface CampBannerInline
 */
export interface CampBannerInline {
    /**
     * 
     * @type {number}
     * @memberof CampBannerInline
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CampBannerInline
     */
    'banner'?: string;
}
/**
 * 
 * @export
 * @interface CampContactInline
 */
export interface CampContactInline {
    /**
     * 
     * @type {number}
     * @memberof CampContactInline
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CampContactInline
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof CampContactInline
     */
    'phone_number_ru'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampContactInline
     */
    'phone_number_en'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampContactInline
     */
    'phone_number_uz'?: string | null;
}
/**
 * 
 * @export
 * @interface CampForm
 */
export interface CampForm {
    /**
     * 
     * @type {number}
     * @memberof CampForm
     */
    'id'?: number;
    /**
     * Video file (MP4 format, up to 50MB)
     * @type {string}
     * @memberof CampForm
     */
    'video'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampForm
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof CampForm
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof CampForm
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CampForm
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof CampForm
     */
    'type': CampFormTypeEnum;
}

export const CampFormTypeEnum = {
    Children: 'children',
    Parent: 'parent',
    Sponsor: 'sponsor'
} as const;

export type CampFormTypeEnum = typeof CampFormTypeEnum[keyof typeof CampFormTypeEnum];

/**
 * 
 * @export
 * @interface CampImageInline
 */
export interface CampImageInline {
    /**
     * 
     * @type {number}
     * @memberof CampImageInline
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CampImageInline
     */
    'image'?: string;
}
/**
 * 
 * @export
 * @interface CampRequirementInline
 */
export interface CampRequirementInline {
    /**
     * 
     * @type {number}
     * @memberof CampRequirementInline
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CampRequirementInline
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CampRequirementInline
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CampsCampsList200Response
 */
export interface CampsCampsList200Response {
    /**
     * 
     * @type {number}
     * @memberof CampsCampsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CampsCampsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CampsCampsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Camp>}
     * @memberof CampsCampsList200Response
     */
    'results': Array<Camp>;
}
/**
 * 
 * @export
 * @interface CareerForm
 */
export interface CareerForm {
    /**
     * 
     * @type {number}
     * @memberof CareerForm
     */
    'id'?: number;
    /**
     * Video file (MP4 format, up to 50MB)
     * @type {string}
     * @memberof CareerForm
     */
    'video'?: string;
    /**
     * 
     * @type {string}
     * @memberof CareerForm
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof CareerForm
     */
    'full_name_ru'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CareerForm
     */
    'full_name_en'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CareerForm
     */
    'full_name_uz'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CareerForm
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof CareerForm
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CareerForm
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface CareerVacanciesList200Response
 */
export interface CareerVacanciesList200Response {
    /**
     * 
     * @type {number}
     * @memberof CareerVacanciesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CareerVacanciesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CareerVacanciesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Specialty>}
     * @memberof CareerVacanciesList200Response
     */
    'results': Array<Specialty>;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name': string;
    /**
     * Leave blank to auto-generate a unique slug.
     * @type {string}
     * @memberof Category
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'parent'?: number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Category
     */
    'children'?: Array<string>;
    /**
     * 
     * @type {Array<CategoryImageInline>}
     * @memberof Category
     */
    'images'?: Array<CategoryImageInline>;
}
/**
 * 
 * @export
 * @interface CategoryImage
 */
export interface CategoryImage {
    /**
     * 
     * @type {number}
     * @memberof CategoryImage
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryImage
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof CategoryImage
     */
    'category': number;
}
/**
 * 
 * @export
 * @interface CategoryImageInline
 */
export interface CategoryImageInline {
    /**
     * 
     * @type {number}
     * @memberof CategoryImageInline
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryImageInline
     */
    'image'?: string;
}
/**
 * 
 * @export
 * @interface ChildrenClub
 */
export interface ChildrenClub {
    /**
     * 
     * @type {number}
     * @memberof ChildrenClub
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'name': string;
    /**
     * Leave blank to auto-generate a unique slug.
     * @type {string}
     * @memberof ChildrenClub
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'seo_text': string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'requirements': string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'banner'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'age_range': string;
    /**
     * 
     * @type {number}
     * @memberof ChildrenClub
     */
    'city': number;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'city_name'?: string;
    /**
     * 
     * @type {Array<ChildrenClubContactInline>}
     * @memberof ChildrenClub
     */
    'contacts'?: Array<ChildrenClubContactInline>;
    /**
     * 
     * @type {Array<ChildrenClubAddressInline>}
     * @memberof ChildrenClub
     */
    'addresses'?: Array<ChildrenClubAddressInline>;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'web_site'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'facebook'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'instagram'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'twitter'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'telegram'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'youtube'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'whatsapp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClub
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface ChildrenClubAddressInline
 */
export interface ChildrenClubAddressInline {
    /**
     * 
     * @type {number}
     * @memberof ChildrenClubAddressInline
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubAddressInline
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof ChildrenClubAddressInline
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof ChildrenClubAddressInline
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface ChildrenClubContactInline
 */
export interface ChildrenClubContactInline {
    /**
     * 
     * @type {number}
     * @memberof ChildrenClubContactInline
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubContactInline
     */
    'type_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubContactInline
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubContactInline
     */
    'phone_number_ru'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubContactInline
     */
    'phone_number_en'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubContactInline
     */
    'phone_number_uz'?: string | null;
}
/**
 * 
 * @export
 * @interface ChildrenClubForm
 */
export interface ChildrenClubForm {
    /**
     * 
     * @type {number}
     * @memberof ChildrenClubForm
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubForm
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubForm
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubForm
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubForm
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubForm
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubForm
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubForm
     */
    'type': ChildrenClubFormTypeEnum;
}

export const ChildrenClubFormTypeEnum = {
    Children: 'children',
    Parent: 'parent',
    Sponsor: 'sponsor'
} as const;

export type ChildrenClubFormTypeEnum = typeof ChildrenClubFormTypeEnum[keyof typeof ChildrenClubFormTypeEnum];

/**
 * 
 * @export
 * @interface ChildrenClubsChildrenClubsList200Response
 */
export interface ChildrenClubsChildrenClubsList200Response {
    /**
     * 
     * @type {number}
     * @memberof ChildrenClubsChildrenClubsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubsChildrenClubsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChildrenClubsChildrenClubsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ChildrenClub>}
     * @memberof ChildrenClubsChildrenClubsList200Response
     */
    'results': Array<ChildrenClub>;
}
/**
 * 
 * @export
 * @interface CitiesCitiesList200Response
 */
export interface CitiesCitiesList200Response {
    /**
     * 
     * @type {number}
     * @memberof CitiesCitiesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CitiesCitiesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CitiesCitiesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<City>}
     * @memberof CitiesCitiesList200Response
     */
    'results': Array<City>;
}
/**
 * 
 * @export
 * @interface CitiesCountriesList200Response
 */
export interface CitiesCountriesList200Response {
    /**
     * 
     * @type {number}
     * @memberof CitiesCountriesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CitiesCountriesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CitiesCountriesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Country>}
     * @memberof CitiesCountriesList200Response
     */
    'results': Array<Country>;
}
/**
 * 
 * @export
 * @interface City
 */
export interface City {
    /**
     * 
     * @type {number}
     * @memberof City
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof City
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof City
     */
    'country': number;
    /**
     * 
     * @type {string}
     * @memberof City
     */
    'country_name'?: string;
}
/**
 * 
 * @export
 * @interface CollaborationProgram
 */
export interface CollaborationProgram {
    /**
     * 
     * @type {number}
     * @memberof CollaborationProgram
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CollaborationProgram
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CollaborationProgram
     */
    'short_description': string;
    /**
     * 
     * @type {string}
     * @memberof CollaborationProgram
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CommonSeoTextList200Response
 */
export interface CommonSeoTextList200Response {
    /**
     * 
     * @type {number}
     * @memberof CommonSeoTextList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CommonSeoTextList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommonSeoTextList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<SeoText>}
     * @memberof CommonSeoTextList200Response
     */
    'results': Array<SeoText>;
}
/**
 * 
 * @export
 * @interface ConsultationForm
 */
export interface ConsultationForm {
    /**
     * 
     * @type {number}
     * @memberof ConsultationForm
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ConsultationForm
     */
    'type': ConsultationFormTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ConsultationForm
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof ConsultationForm
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof ConsultationForm
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ConsultationForm
     */
    'message': string;
    /**
     * Video file (MP4 format, up to 50MB)
     * @type {string}
     * @memberof ConsultationForm
     */
    'video'?: string;
}

export const ConsultationFormTypeEnum = {
    Children: 'children',
    Parent: 'parent',
    Sponsor: 'sponsor'
} as const;

export type ConsultationFormTypeEnum = typeof ConsultationFormTypeEnum[keyof typeof ConsultationFormTypeEnum];

/**
 * 
 * @export
 * @interface ContactsBranchesList200Response
 */
export interface ContactsBranchesList200Response {
    /**
     * 
     * @type {number}
     * @memberof ContactsBranchesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ContactsBranchesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactsBranchesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Branch>}
     * @memberof ContactsBranchesList200Response
     */
    'results': Array<Branch>;
}
/**
 * 
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * 
     * @type {number}
     * @memberof Country
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'flag'?: string;
}
/**
 * 
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'title': string;
    /**
     * Leave blank to auto-generate a unique slug.
     * @type {string}
     * @memberof Course
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'seo_text': string;
    /**
     * 
     * @type {boolean}
     * @memberof Course
     */
    'for_children'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Course
     */
    'for_adults'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Course
     */
    'for_all'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    'category': number;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'updated_at'?: string;
    /**
     * 
     * @type {Array<Lesson>}
     * @memberof Course
     */
    'lessons'?: Array<Lesson>;
}
/**
 * 
 * @export
 * @interface EducationCategoriesList200Response
 */
export interface EducationCategoriesList200Response {
    /**
     * 
     * @type {number}
     * @memberof EducationCategoriesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof EducationCategoriesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationCategoriesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Category>}
     * @memberof EducationCategoriesList200Response
     */
    'results': Array<Category>;
}
/**
 * 
 * @export
 * @interface EducationCategoryImagesList200Response
 */
export interface EducationCategoryImagesList200Response {
    /**
     * 
     * @type {number}
     * @memberof EducationCategoryImagesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof EducationCategoryImagesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationCategoryImagesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CategoryImage>}
     * @memberof EducationCategoryImagesList200Response
     */
    'results': Array<CategoryImage>;
}
/**
 * 
 * @export
 * @interface EducationCoursesList200Response
 */
export interface EducationCoursesList200Response {
    /**
     * 
     * @type {number}
     * @memberof EducationCoursesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof EducationCoursesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationCoursesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Course>}
     * @memberof EducationCoursesList200Response
     */
    'results': Array<Course>;
}
/**
 * 
 * @export
 * @interface EducationFilesList200Response
 */
export interface EducationFilesList200Response {
    /**
     * 
     * @type {number}
     * @memberof EducationFilesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof EducationFilesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationFilesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<any>}
     * @memberof EducationFilesList200Response
     */
    'results': Array<any>;
}
/**
 * 
 * @export
 * @interface EducationLessonsList200Response
 */
export interface EducationLessonsList200Response {
    /**
     * 
     * @type {number}
     * @memberof EducationLessonsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof EducationLessonsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationLessonsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Lesson>}
     * @memberof EducationLessonsList200Response
     */
    'results': Array<Lesson>;
}
/**
 * 
 * @export
 * @interface InterpreterHelpForm
 */
export interface InterpreterHelpForm {
    /**
     * 
     * @type {number}
     * @memberof InterpreterHelpForm
     */
    'id'?: number;
    /**
     * Video file (MP4 format, up to 50MB)
     * @type {string}
     * @memberof InterpreterHelpForm
     */
    'video'?: string;
    /**
     * 
     * @type {string}
     * @memberof InterpreterHelpForm
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof InterpreterHelpForm
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof InterpreterHelpForm
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof InterpreterHelpForm
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof InterpreterHelpForm
     */
    'city': number;
}
/**
 * 
 * @export
 * @interface Lesson
 */
export interface Lesson {
    /**
     * 
     * @type {number}
     * @memberof Lesson
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Lesson
     */
    'title': string;
    /**
     * Leave blank to auto-generate a unique slug.
     * @type {string}
     * @memberof Lesson
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lesson
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Lesson
     */
    'seo_text': string;
    /**
     * 
     * @type {string}
     * @memberof Lesson
     */
    'video'?: string;
    /**
     * 
     * @type {number}
     * @memberof Lesson
     */
    'order'?: number;
    /**
     * 
     * @type {number}
     * @memberof Lesson
     */
    'course': number;
    /**
     * 
     * @type {string}
     * @memberof Lesson
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lesson
     */
    'updated_at'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof Lesson
     */
    'files'?: Array<any>;
}
/**
 * 
 * @export
 * @interface MedicalOrganization
 */
export interface MedicalOrganization {
    /**
     * 
     * @type {number}
     * @memberof MedicalOrganization
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'name': string;
    /**
     * Leave blank to auto-generate a unique slug.
     * @type {string}
     * @memberof MedicalOrganization
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'seo_text': string;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof MedicalOrganization
     */
    'city': number;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'city_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'web_site'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'facebook'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'instagram'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'twitter'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'telegram'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'youtube'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'whatsapp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'schedule': string;
    /**
     * 
     * @type {Array<MedicalOrganizationAddressInline>}
     * @memberof MedicalOrganization
     */
    'addresses': Array<MedicalOrganizationAddressInline>;
    /**
     * 
     * @type {Array<MedicalOrganizationContactInline>}
     * @memberof MedicalOrganization
     */
    'contacts': Array<MedicalOrganizationContactInline>;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganization
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface MedicalOrganizationAddressInline
 */
export interface MedicalOrganizationAddressInline {
    /**
     * 
     * @type {number}
     * @memberof MedicalOrganizationAddressInline
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganizationAddressInline
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof MedicalOrganizationAddressInline
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof MedicalOrganizationAddressInline
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface MedicalOrganizationContactInline
 */
export interface MedicalOrganizationContactInline {
    /**
     * 
     * @type {number}
     * @memberof MedicalOrganizationContactInline
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganizationContactInline
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganizationContactInline
     */
    'phone_number_ru'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganizationContactInline
     */
    'phone_number_en'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganizationContactInline
     */
    'phone_number_uz'?: string | null;
}
/**
 * 
 * @export
 * @interface MedicalOrganizationForm
 */
export interface MedicalOrganizationForm {
    /**
     * 
     * @type {number}
     * @memberof MedicalOrganizationForm
     */
    'id'?: number;
    /**
     * Video file (MP4 format, up to 50MB)
     * @type {string}
     * @memberof MedicalOrganizationForm
     */
    'video'?: string;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganizationForm
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganizationForm
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganizationForm
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof MedicalOrganizationForm
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface MedicineMedicalOrganizationsList200Response
 */
export interface MedicineMedicalOrganizationsList200Response {
    /**
     * 
     * @type {number}
     * @memberof MedicineMedicalOrganizationsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof MedicineMedicalOrganizationsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MedicineMedicalOrganizationsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<MedicalOrganization>}
     * @memberof MedicineMedicalOrganizationsList200Response
     */
    'results': Array<MedicalOrganization>;
}
/**
 * 
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * 
     * @type {number}
     * @memberof ModelFile
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    'type'?: ModelFileTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    'file'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelFile
     */
    'lesson': number;
}

export const ModelFileTypeEnum = {
    File: 'file',
    Book: 'book',
    Encyclopedia: 'encyclopedia'
} as const;

export type ModelFileTypeEnum = typeof ModelFileTypeEnum[keyof typeof ModelFileTypeEnum];

/**
 * 
 * @export
 * @interface News
 */
export interface News {
    /**
     * 
     * @type {number}
     * @memberof News
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    'title': string;
    /**
     * Leave blank to auto-generate a unique slug.
     * @type {string}
     * @memberof News
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    'seo_text': string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof News
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface NewsArticlesArticlesList200Response
 */
export interface NewsArticlesArticlesList200Response {
    /**
     * 
     * @type {number}
     * @memberof NewsArticlesArticlesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof NewsArticlesArticlesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewsArticlesArticlesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Article>}
     * @memberof NewsArticlesArticlesList200Response
     */
    'results': Array<Article>;
}
/**
 * 
 * @export
 * @interface NewsArticlesNewsList200Response
 */
export interface NewsArticlesNewsList200Response {
    /**
     * 
     * @type {number}
     * @memberof NewsArticlesNewsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof NewsArticlesNewsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewsArticlesNewsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<News>}
     * @memberof NewsArticlesNewsList200Response
     */
    'results': Array<News>;
}
/**
 * 
 * @export
 * @interface PsychologicalHelpForm
 */
export interface PsychologicalHelpForm {
    /**
     * 
     * @type {number}
     * @memberof PsychologicalHelpForm
     */
    'id'?: number;
    /**
     * Video file (MP4 format, up to 50MB)
     * @type {string}
     * @memberof PsychologicalHelpForm
     */
    'video'?: string;
    /**
     * 
     * @type {string}
     * @memberof PsychologicalHelpForm
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof PsychologicalHelpForm
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof PsychologicalHelpForm
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof PsychologicalHelpForm
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface SeoText
 */
export interface SeoText {
    /**
     * 
     * @type {number}
     * @memberof SeoText
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SeoText
     */
    'page'?: SeoTextPageEnum;
    /**
     * 
     * @type {string}
     * @memberof SeoText
     */
    'text': string;
}

export const SeoTextPageEnum = {
    Main: 'main',
    Camp: 'camp',
    Career: 'career',
    ChildrenClub: 'children_club',
    Contacts: 'contacts',
    Education: 'education',
    Medicine: 'medicine',
    News: 'news',
    Articles: 'articles',
    Sponsor: 'sponsor',
    About: 'about',
    Download: 'download',
    Partners: 'partners',
    PsychologicalHelp: 'psychological_help'
} as const;

export type SeoTextPageEnum = typeof SeoTextPageEnum[keyof typeof SeoTextPageEnum];

/**
 * 
 * @export
 * @interface Specialty
 */
export interface Specialty {
    /**
     * 
     * @type {number}
     * @memberof Specialty
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Specialty
     */
    'name': string;
    /**
     * Leave blank to auto-generate a unique slug.
     * @type {string}
     * @memberof Specialty
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof Specialty
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof Specialty
     */
    'city'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Specialty
     */
    'city_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Specialty
     */
    'seo_text': string;
    /**
     * 
     * @type {string}
     * @memberof Specialty
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof Specialty
     */
    'video'?: string;
    /**
     * 
     * @type {string}
     * @memberof Specialty
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Specialty
     */
    'updated_at'?: string;
    /**
     * 
     * @type {Array<SpecialtyRequirementInline>}
     * @memberof Specialty
     */
    'requirements'?: Array<SpecialtyRequirementInline>;
}
/**
 * 
 * @export
 * @interface SpecialtyRequirementInline
 */
export interface SpecialtyRequirementInline {
    /**
     * 
     * @type {number}
     * @memberof SpecialtyRequirementInline
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyRequirementInline
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyRequirementInline
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface SponsorForm
 */
export interface SponsorForm {
    /**
     * 
     * @type {number}
     * @memberof SponsorForm
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SponsorForm
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof SponsorForm
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof SponsorForm
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof SponsorForm
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof SponsorForm
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SponsorForm
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof SponsorForm
     */
    'collaboration_program': number;
}
/**
 * 
 * @export
 * @interface SponsorSponsorsList200Response
 */
export interface SponsorSponsorsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SponsorSponsorsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SponsorSponsorsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SponsorSponsorsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CollaborationProgram>}
     * @memberof SponsorSponsorsList200Response
     */
    'results': Array<CollaborationProgram>;
}

/**
 * CampsApi - axios parameter creator
 * @export
 */
export const CampsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {CampForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campsCampFormsCreate: async (data: CampForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('campsCampFormsCreate', 'data', data)
            const localVarPath = `/camps/camp-forms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [city] 
         * @param {number} [country] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campsCampsList: async (city?: number, country?: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/camps/camps/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campsCampsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('campsCampsRead', 'slug', slug)
            const localVarPath = `/camps/camps/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampsApi - functional programming interface
 * @export
 */
export const CampsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampsApiAxiosParamCreator(configuration)
    return {
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {CampForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campsCampFormsCreate(data: CampForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampForm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campsCampFormsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [city] 
         * @param {number} [country] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campsCampsList(city?: number, country?: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampsCampsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campsCampsList(city, country, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campsCampsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Camp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campsCampsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CampsApi - factory interface
 * @export
 */
export const CampsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampsApiFp(configuration)
    return {
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {CampForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campsCampFormsCreate(data: CampForm, options?: any): AxiosPromise<CampForm> {
            return localVarFp.campsCampFormsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [city] 
         * @param {number} [country] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campsCampsList(city?: number, country?: number, limit?: number, offset?: number, options?: any): AxiosPromise<CampsCampsList200Response> {
            return localVarFp.campsCampsList(city, country, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campsCampsRead(slug: string, options?: any): AxiosPromise<Camp> {
            return localVarFp.campsCampsRead(slug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CampsApi - interface
 * @export
 * @interface CampsApi
 */
export interface CampsApiInterface {
    /**
     * Upload video file (MP4 format, up to 50MB)
     * @param {CampForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampsApiInterface
     */
    campsCampFormsCreate(data: CampForm, options?: AxiosRequestConfig): AxiosPromise<CampForm>;

    /**
     * 
     * @param {number} [city] 
     * @param {number} [country] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampsApiInterface
     */
    campsCampsList(city?: number, country?: number, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<CampsCampsList200Response>;

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampsApiInterface
     */
    campsCampsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Camp>;

}

/**
 * CampsApi - object-oriented interface
 * @export
 * @class CampsApi
 * @extends {BaseAPI}
 */
export class CampsApi extends BaseAPI implements CampsApiInterface {
    /**
     * Upload video file (MP4 format, up to 50MB)
     * @param {CampForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampsApi
     */
    public campsCampFormsCreate(data: CampForm, options?: AxiosRequestConfig) {
        return CampsApiFp(this.configuration).campsCampFormsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [city] 
     * @param {number} [country] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampsApi
     */
    public campsCampsList(city?: number, country?: number, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return CampsApiFp(this.configuration).campsCampsList(city, country, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampsApi
     */
    public campsCampsRead(slug: string, options?: AxiosRequestConfig) {
        return CampsApiFp(this.configuration).campsCampsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CareerApi - axios parameter creator
 * @export
 */
export const CareerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {CareerForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        careerCareerFormsCreate: async (data: CareerForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('careerCareerFormsCreate', 'data', data)
            const localVarPath = `/career/career-forms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        careerVacanciesList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/career/vacancies/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        careerVacanciesRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('careerVacanciesRead', 'slug', slug)
            const localVarPath = `/career/vacancies/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CareerApi - functional programming interface
 * @export
 */
export const CareerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CareerApiAxiosParamCreator(configuration)
    return {
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {CareerForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async careerCareerFormsCreate(data: CareerForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CareerForm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.careerCareerFormsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async careerVacanciesList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CareerVacanciesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.careerVacanciesList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async careerVacanciesRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Specialty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.careerVacanciesRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CareerApi - factory interface
 * @export
 */
export const CareerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CareerApiFp(configuration)
    return {
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {CareerForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        careerCareerFormsCreate(data: CareerForm, options?: any): AxiosPromise<CareerForm> {
            return localVarFp.careerCareerFormsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        careerVacanciesList(limit?: number, offset?: number, options?: any): AxiosPromise<CareerVacanciesList200Response> {
            return localVarFp.careerVacanciesList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        careerVacanciesRead(slug: string, options?: any): AxiosPromise<Specialty> {
            return localVarFp.careerVacanciesRead(slug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CareerApi - interface
 * @export
 * @interface CareerApi
 */
export interface CareerApiInterface {
    /**
     * Upload video file (MP4 format, up to 50MB)
     * @param {CareerForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CareerApiInterface
     */
    careerCareerFormsCreate(data: CareerForm, options?: AxiosRequestConfig): AxiosPromise<CareerForm>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CareerApiInterface
     */
    careerVacanciesList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<CareerVacanciesList200Response>;

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CareerApiInterface
     */
    careerVacanciesRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Specialty>;

}

/**
 * CareerApi - object-oriented interface
 * @export
 * @class CareerApi
 * @extends {BaseAPI}
 */
export class CareerApi extends BaseAPI implements CareerApiInterface {
    /**
     * Upload video file (MP4 format, up to 50MB)
     * @param {CareerForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CareerApi
     */
    public careerCareerFormsCreate(data: CareerForm, options?: AxiosRequestConfig) {
        return CareerApiFp(this.configuration).careerCareerFormsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CareerApi
     */
    public careerVacanciesList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return CareerApiFp(this.configuration).careerVacanciesList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CareerApi
     */
    public careerVacanciesRead(slug: string, options?: AxiosRequestConfig) {
        return CareerApiFp(this.configuration).careerVacanciesRead(slug, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ChildrenClubsApi - axios parameter creator
 * @export
 */
export const ChildrenClubsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChildrenClubForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        childrenClubsChildrenClubFormsCreate: async (data: ChildrenClubForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('childrenClubsChildrenClubFormsCreate', 'data', data)
            const localVarPath = `/children_clubs/children-club-forms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [city] 
         * @param {number} [country] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        childrenClubsChildrenClubsList: async (city?: number, country?: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/children_clubs/children-clubs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        childrenClubsChildrenClubsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('childrenClubsChildrenClubsRead', 'slug', slug)
            const localVarPath = `/children_clubs/children-clubs/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChildrenClubsApi - functional programming interface
 * @export
 */
export const ChildrenClubsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChildrenClubsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChildrenClubForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async childrenClubsChildrenClubFormsCreate(data: ChildrenClubForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChildrenClubForm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.childrenClubsChildrenClubFormsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [city] 
         * @param {number} [country] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async childrenClubsChildrenClubsList(city?: number, country?: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChildrenClubsChildrenClubsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.childrenClubsChildrenClubsList(city, country, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async childrenClubsChildrenClubsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChildrenClub>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.childrenClubsChildrenClubsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChildrenClubsApi - factory interface
 * @export
 */
export const ChildrenClubsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChildrenClubsApiFp(configuration)
    return {
        /**
         * 
         * @param {ChildrenClubForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        childrenClubsChildrenClubFormsCreate(data: ChildrenClubForm, options?: any): AxiosPromise<ChildrenClubForm> {
            return localVarFp.childrenClubsChildrenClubFormsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [city] 
         * @param {number} [country] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        childrenClubsChildrenClubsList(city?: number, country?: number, limit?: number, offset?: number, options?: any): AxiosPromise<ChildrenClubsChildrenClubsList200Response> {
            return localVarFp.childrenClubsChildrenClubsList(city, country, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        childrenClubsChildrenClubsRead(slug: string, options?: any): AxiosPromise<ChildrenClub> {
            return localVarFp.childrenClubsChildrenClubsRead(slug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChildrenClubsApi - interface
 * @export
 * @interface ChildrenClubsApi
 */
export interface ChildrenClubsApiInterface {
    /**
     * 
     * @param {ChildrenClubForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenClubsApiInterface
     */
    childrenClubsChildrenClubFormsCreate(data: ChildrenClubForm, options?: AxiosRequestConfig): AxiosPromise<ChildrenClubForm>;

    /**
     * 
     * @param {number} [city] 
     * @param {number} [country] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenClubsApiInterface
     */
    childrenClubsChildrenClubsList(city?: number, country?: number, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ChildrenClubsChildrenClubsList200Response>;

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenClubsApiInterface
     */
    childrenClubsChildrenClubsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<ChildrenClub>;

}

/**
 * ChildrenClubsApi - object-oriented interface
 * @export
 * @class ChildrenClubsApi
 * @extends {BaseAPI}
 */
export class ChildrenClubsApi extends BaseAPI implements ChildrenClubsApiInterface {
    /**
     * 
     * @param {ChildrenClubForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenClubsApi
     */
    public childrenClubsChildrenClubFormsCreate(data: ChildrenClubForm, options?: AxiosRequestConfig) {
        return ChildrenClubsApiFp(this.configuration).childrenClubsChildrenClubFormsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [city] 
     * @param {number} [country] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenClubsApi
     */
    public childrenClubsChildrenClubsList(city?: number, country?: number, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ChildrenClubsApiFp(this.configuration).childrenClubsChildrenClubsList(city, country, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenClubsApi
     */
    public childrenClubsChildrenClubsRead(slug: string, options?: AxiosRequestConfig) {
        return ChildrenClubsApiFp(this.configuration).childrenClubsChildrenClubsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CitiesApi - axios parameter creator
 * @export
 */
export const CitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [country] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesCitiesList: async (country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cities/cities/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Город.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesCitiesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('citiesCitiesRead', 'id', id)
            const localVarPath = `/cities/cities/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesCountriesList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cities/countries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesCountriesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('citiesCountriesRead', 'id', id)
            const localVarPath = `/cities/countries/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CitiesApi - functional programming interface
 * @export
 */
export const CitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [country] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async citiesCitiesList(country?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CitiesCitiesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.citiesCitiesList(country, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Город.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async citiesCitiesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<City>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.citiesCitiesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async citiesCountriesList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CitiesCountriesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.citiesCountriesList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async citiesCountriesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.citiesCountriesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CitiesApi - factory interface
 * @export
 */
export const CitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CitiesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [country] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesCitiesList(country?: string, limit?: number, offset?: number, options?: any): AxiosPromise<CitiesCitiesList200Response> {
            return localVarFp.citiesCitiesList(country, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Город.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesCitiesRead(id: number, options?: any): AxiosPromise<City> {
            return localVarFp.citiesCitiesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesCountriesList(limit?: number, offset?: number, options?: any): AxiosPromise<CitiesCountriesList200Response> {
            return localVarFp.citiesCountriesList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citiesCountriesRead(id: number, options?: any): AxiosPromise<Country> {
            return localVarFp.citiesCountriesRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CitiesApi - interface
 * @export
 * @interface CitiesApi
 */
export interface CitiesApiInterface {
    /**
     * 
     * @param {string} [country] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesApiInterface
     */
    citiesCitiesList(country?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<CitiesCitiesList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Город.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesApiInterface
     */
    citiesCitiesRead(id: number, options?: AxiosRequestConfig): AxiosPromise<City>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesApiInterface
     */
    citiesCountriesList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<CitiesCountriesList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Country.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesApiInterface
     */
    citiesCountriesRead(id: number, options?: AxiosRequestConfig): AxiosPromise<Country>;

}

/**
 * CitiesApi - object-oriented interface
 * @export
 * @class CitiesApi
 * @extends {BaseAPI}
 */
export class CitiesApi extends BaseAPI implements CitiesApiInterface {
    /**
     * 
     * @param {string} [country] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesApi
     */
    public citiesCitiesList(country?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return CitiesApiFp(this.configuration).citiesCitiesList(country, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Город.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesApi
     */
    public citiesCitiesRead(id: number, options?: AxiosRequestConfig) {
        return CitiesApiFp(this.configuration).citiesCitiesRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesApi
     */
    public citiesCountriesList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return CitiesApiFp(this.configuration).citiesCountriesList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Country.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesApi
     */
    public citiesCountriesRead(id: number, options?: AxiosRequestConfig) {
        return CitiesApiFp(this.configuration).citiesCountriesRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CommonApi - axios parameter creator
 * @export
 */
export const CommonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [page] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonSeoTextList: async (page?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/common/seo-text/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this SEO text for page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonSeoTextRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commonSeoTextRead', 'id', id)
            const localVarPath = `/common/seo-text/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonApi - functional programming interface
 * @export
 */
export const CommonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [page] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonSeoTextList(page?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonSeoTextList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commonSeoTextList(page, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this SEO text for page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonSeoTextRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeoText>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commonSeoTextRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommonApi - factory interface
 * @export
 */
export const CommonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommonApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [page] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonSeoTextList(page?: string, limit?: number, offset?: number, options?: any): AxiosPromise<CommonSeoTextList200Response> {
            return localVarFp.commonSeoTextList(page, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this SEO text for page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonSeoTextRead(id: number, options?: any): AxiosPromise<SeoText> {
            return localVarFp.commonSeoTextRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommonApi - interface
 * @export
 * @interface CommonApi
 */
export interface CommonApiInterface {
    /**
     * 
     * @param {string} [page] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApiInterface
     */
    commonSeoTextList(page?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<CommonSeoTextList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this SEO text for page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApiInterface
     */
    commonSeoTextRead(id: number, options?: AxiosRequestConfig): AxiosPromise<SeoText>;

}

/**
 * CommonApi - object-oriented interface
 * @export
 * @class CommonApi
 * @extends {BaseAPI}
 */
export class CommonApi extends BaseAPI implements CommonApiInterface {
    /**
     * 
     * @param {string} [page] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonSeoTextList(page?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return CommonApiFp(this.configuration).commonSeoTextList(page, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this SEO text for page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public commonSeoTextRead(id: number, options?: AxiosRequestConfig) {
        return CommonApiFp(this.configuration).commonSeoTextRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ContactsApi - axios parameter creator
 * @export
 */
export const ContactsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsBranchesList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contacts/branches/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsBranchesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contactsBranchesRead', 'id', id)
            const localVarPath = `/contacts/branches/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {ConsultationForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsConsultationFormsCreate: async (data: ConsultationForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('contactsConsultationFormsCreate', 'data', data)
            const localVarPath = `/contacts/consultation_forms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactsApi - functional programming interface
 * @export
 */
export const ContactsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsBranchesList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactsBranchesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsBranchesList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsBranchesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsBranchesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {ConsultationForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsConsultationFormsCreate(data: ConsultationForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsultationForm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsConsultationFormsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContactsApi - factory interface
 * @export
 */
export const ContactsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsBranchesList(limit?: number, offset?: number, options?: any): AxiosPromise<ContactsBranchesList200Response> {
            return localVarFp.contactsBranchesList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Branch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsBranchesRead(id: number, options?: any): AxiosPromise<Branch> {
            return localVarFp.contactsBranchesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {ConsultationForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsConsultationFormsCreate(data: ConsultationForm, options?: any): AxiosPromise<ConsultationForm> {
            return localVarFp.contactsConsultationFormsCreate(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactsApi - interface
 * @export
 * @interface ContactsApi
 */
export interface ContactsApiInterface {
    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    contactsBranchesList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<ContactsBranchesList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    contactsBranchesRead(id: number, options?: AxiosRequestConfig): AxiosPromise<Branch>;

    /**
     * Upload video file (MP4 format, up to 50MB)
     * @param {ConsultationForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    contactsConsultationFormsCreate(data: ConsultationForm, options?: AxiosRequestConfig): AxiosPromise<ConsultationForm>;

}

/**
 * ContactsApi - object-oriented interface
 * @export
 * @class ContactsApi
 * @extends {BaseAPI}
 */
export class ContactsApi extends BaseAPI implements ContactsApiInterface {
    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public contactsBranchesList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ContactsApiFp(this.configuration).contactsBranchesList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Branch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public contactsBranchesRead(id: number, options?: AxiosRequestConfig) {
        return ContactsApiFp(this.configuration).contactsBranchesRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload video file (MP4 format, up to 50MB)
     * @param {ConsultationForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public contactsConsultationFormsCreate(data: ConsultationForm, options?: AxiosRequestConfig) {
        return ContactsApiFp(this.configuration).contactsConsultationFormsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EducationApi - axios parameter creator
 * @export
 */
export const EducationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationCategoriesList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/education/categories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationCategoriesRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('educationCategoriesRead', 'slug', slug)
            const localVarPath = `/education/categories/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [category] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationCategoryImagesList: async (category?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/education/category-images/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationCategoryImagesRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('educationCategoryImagesRead', 'slug', slug)
            const localVarPath = `/education/category-images/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all categories
         * @param {string} [forAdults] 
         * @param {string} [forChildren] 
         * @param {string} [forAll] 
         * @param {Array<number>} [categories] List of categories pk
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationCoursesList: async (forAdults?: string, forChildren?: string, forAll?: string, categories?: Array<number>, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/education/courses/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (forAdults !== undefined) {
                localVarQueryParameter['for_adults'] = forAdults;
            }

            if (forChildren !== undefined) {
                localVarQueryParameter['for_children'] = forChildren;
            }

            if (forAll !== undefined) {
                localVarQueryParameter['for_all'] = forAll;
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories.join(COLLECTION_FORMATS.csv);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationCoursesRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('educationCoursesRead', 'slug', slug)
            const localVarPath = `/education/courses/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [lesson] 
         * @param {string} [type] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationFilesList: async (lesson?: string, type?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/education/files/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (lesson !== undefined) {
                localVarQueryParameter['lesson'] = lesson;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Файл.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationFilesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('educationFilesRead', 'id', id)
            const localVarPath = `/education/files/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [course] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationLessonsList: async (course?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/education/lessons/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (course !== undefined) {
                localVarQueryParameter['course'] = course;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationLessonsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('educationLessonsRead', 'slug', slug)
            const localVarPath = `/education/lessons/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EducationApi - functional programming interface
 * @export
 */
export const EducationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EducationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async educationCategoriesList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationCategoriesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.educationCategoriesList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async educationCategoriesRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.educationCategoriesRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [category] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async educationCategoryImagesList(category?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationCategoryImagesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.educationCategoryImagesList(category, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async educationCategoryImagesRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.educationCategoryImagesRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all categories
         * @param {string} [forAdults] 
         * @param {string} [forChildren] 
         * @param {string} [forAll] 
         * @param {Array<number>} [categories] List of categories pk
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async educationCoursesList(forAdults?: string, forChildren?: string, forAll?: string, categories?: Array<number>, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationCoursesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.educationCoursesList(forAdults, forChildren, forAll, categories, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async educationCoursesRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.educationCoursesRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [lesson] 
         * @param {string} [type] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async educationFilesList(lesson?: string, type?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationFilesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.educationFilesList(lesson, type, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Файл.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async educationFilesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.educationFilesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [course] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async educationLessonsList(course?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationLessonsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.educationLessonsList(course, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async educationLessonsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lesson>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.educationLessonsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EducationApi - factory interface
 * @export
 */
export const EducationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EducationApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationCategoriesList(limit?: number, offset?: number, options?: any): AxiosPromise<EducationCategoriesList200Response> {
            return localVarFp.educationCategoriesList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationCategoriesRead(slug: string, options?: any): AxiosPromise<Category> {
            return localVarFp.educationCategoriesRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [category] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationCategoryImagesList(category?: string, limit?: number, offset?: number, options?: any): AxiosPromise<EducationCategoryImagesList200Response> {
            return localVarFp.educationCategoryImagesList(category, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationCategoryImagesRead(slug: string, options?: any): AxiosPromise<CategoryImage> {
            return localVarFp.educationCategoryImagesRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * List all categories
         * @param {string} [forAdults] 
         * @param {string} [forChildren] 
         * @param {string} [forAll] 
         * @param {Array<number>} [categories] List of categories pk
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationCoursesList(forAdults?: string, forChildren?: string, forAll?: string, categories?: Array<number>, limit?: number, offset?: number, options?: any): AxiosPromise<EducationCoursesList200Response> {
            return localVarFp.educationCoursesList(forAdults, forChildren, forAll, categories, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationCoursesRead(slug: string, options?: any): AxiosPromise<Course> {
            return localVarFp.educationCoursesRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [lesson] 
         * @param {string} [type] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationFilesList(lesson?: string, type?: string, limit?: number, offset?: number, options?: any): AxiosPromise<EducationFilesList200Response> {
            return localVarFp.educationFilesList(lesson, type, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Файл.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationFilesRead(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.educationFilesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [course] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationLessonsList(course?: string, limit?: number, offset?: number, options?: any): AxiosPromise<EducationLessonsList200Response> {
            return localVarFp.educationLessonsList(course, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        educationLessonsRead(slug: string, options?: any): AxiosPromise<Lesson> {
            return localVarFp.educationLessonsRead(slug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EducationApi - interface
 * @export
 * @interface EducationApi
 */
export interface EducationApiInterface {
    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApiInterface
     */
    educationCategoriesList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<EducationCategoriesList200Response>;

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApiInterface
     */
    educationCategoriesRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Category>;

    /**
     * 
     * @param {string} [category] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApiInterface
     */
    educationCategoryImagesList(category?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<EducationCategoryImagesList200Response>;

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApiInterface
     */
    educationCategoryImagesRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<CategoryImage>;

    /**
     * List all categories
     * @param {string} [forAdults] 
     * @param {string} [forChildren] 
     * @param {string} [forAll] 
     * @param {Array<number>} [categories] List of categories pk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApiInterface
     */
    educationCoursesList(forAdults?: string, forChildren?: string, forAll?: string, categories?: Array<number>, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<EducationCoursesList200Response>;

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApiInterface
     */
    educationCoursesRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Course>;

    /**
     * 
     * @param {string} [lesson] 
     * @param {string} [type] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApiInterface
     */
    educationFilesList(lesson?: string, type?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<EducationFilesList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Файл.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApiInterface
     */
    educationFilesRead(id: number, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @param {string} [course] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApiInterface
     */
    educationLessonsList(course?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<EducationLessonsList200Response>;

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApiInterface
     */
    educationLessonsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Lesson>;

}

/**
 * EducationApi - object-oriented interface
 * @export
 * @class EducationApi
 * @extends {BaseAPI}
 */
export class EducationApi extends BaseAPI implements EducationApiInterface {
    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public educationCategoriesList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).educationCategoriesList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public educationCategoriesRead(slug: string, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).educationCategoriesRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [category] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public educationCategoryImagesList(category?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).educationCategoryImagesList(category, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public educationCategoryImagesRead(slug: string, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).educationCategoryImagesRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all categories
     * @param {string} [forAdults] 
     * @param {string} [forChildren] 
     * @param {string} [forAll] 
     * @param {Array<number>} [categories] List of categories pk
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public educationCoursesList(forAdults?: string, forChildren?: string, forAll?: string, categories?: Array<number>, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).educationCoursesList(forAdults, forChildren, forAll, categories, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public educationCoursesRead(slug: string, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).educationCoursesRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [lesson] 
     * @param {string} [type] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public educationFilesList(lesson?: string, type?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).educationFilesList(lesson, type, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Файл.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public educationFilesRead(id: number, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).educationFilesRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [course] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public educationLessonsList(course?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).educationLessonsList(course, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public educationLessonsRead(slug: string, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).educationLessonsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MedicineApi - axios parameter creator
 * @export
 */
export const MedicineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {InterpreterHelpForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineInterpreterHelpFormsCreate: async (data: InterpreterHelpForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('medicineInterpreterHelpFormsCreate', 'data', data)
            const localVarPath = `/medicine/interpreter-help-forms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {MedicalOrganizationForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineMedicalOrganizationFormsCreate: async (data: MedicalOrganizationForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('medicineMedicalOrganizationFormsCreate', 'data', data)
            const localVarPath = `/medicine/medical-organization-forms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [city] 
         * @param {number} [country] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineMedicalOrganizationsList: async (city?: number, country?: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/medicine/medical-organizations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineMedicalOrganizationsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('medicineMedicalOrganizationsRead', 'slug', slug)
            const localVarPath = `/medicine/medical-organizations/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {PsychologicalHelpForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicinePsychologicalHelpFormsCreate: async (data: PsychologicalHelpForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('medicinePsychologicalHelpFormsCreate', 'data', data)
            const localVarPath = `/medicine/psychological-help-forms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MedicineApi - functional programming interface
 * @export
 */
export const MedicineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MedicineApiAxiosParamCreator(configuration)
    return {
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {InterpreterHelpForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineInterpreterHelpFormsCreate(data: InterpreterHelpForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InterpreterHelpForm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineInterpreterHelpFormsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {MedicalOrganizationForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineMedicalOrganizationFormsCreate(data: MedicalOrganizationForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicalOrganizationForm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineMedicalOrganizationFormsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [city] 
         * @param {number} [country] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineMedicalOrganizationsList(city?: number, country?: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicineMedicalOrganizationsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineMedicalOrganizationsList(city, country, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineMedicalOrganizationsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicalOrganization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineMedicalOrganizationsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {PsychologicalHelpForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicinePsychologicalHelpFormsCreate(data: PsychologicalHelpForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PsychologicalHelpForm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicinePsychologicalHelpFormsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MedicineApi - factory interface
 * @export
 */
export const MedicineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MedicineApiFp(configuration)
    return {
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {InterpreterHelpForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineInterpreterHelpFormsCreate(data: InterpreterHelpForm, options?: any): AxiosPromise<InterpreterHelpForm> {
            return localVarFp.medicineInterpreterHelpFormsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {MedicalOrganizationForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineMedicalOrganizationFormsCreate(data: MedicalOrganizationForm, options?: any): AxiosPromise<MedicalOrganizationForm> {
            return localVarFp.medicineMedicalOrganizationFormsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [city] 
         * @param {number} [country] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineMedicalOrganizationsList(city?: number, country?: number, limit?: number, offset?: number, options?: any): AxiosPromise<MedicineMedicalOrganizationsList200Response> {
            return localVarFp.medicineMedicalOrganizationsList(city, country, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineMedicalOrganizationsRead(slug: string, options?: any): AxiosPromise<MedicalOrganization> {
            return localVarFp.medicineMedicalOrganizationsRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload video file (MP4 format, up to 50MB)
         * @param {PsychologicalHelpForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicinePsychologicalHelpFormsCreate(data: PsychologicalHelpForm, options?: any): AxiosPromise<PsychologicalHelpForm> {
            return localVarFp.medicinePsychologicalHelpFormsCreate(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MedicineApi - interface
 * @export
 * @interface MedicineApi
 */
export interface MedicineApiInterface {
    /**
     * Upload video file (MP4 format, up to 50MB)
     * @param {InterpreterHelpForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApiInterface
     */
    medicineInterpreterHelpFormsCreate(data: InterpreterHelpForm, options?: AxiosRequestConfig): AxiosPromise<InterpreterHelpForm>;

    /**
     * Upload video file (MP4 format, up to 50MB)
     * @param {MedicalOrganizationForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApiInterface
     */
    medicineMedicalOrganizationFormsCreate(data: MedicalOrganizationForm, options?: AxiosRequestConfig): AxiosPromise<MedicalOrganizationForm>;

    /**
     * 
     * @param {number} [city] 
     * @param {number} [country] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApiInterface
     */
    medicineMedicalOrganizationsList(city?: number, country?: number, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<MedicineMedicalOrganizationsList200Response>;

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApiInterface
     */
    medicineMedicalOrganizationsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<MedicalOrganization>;

    /**
     * Upload video file (MP4 format, up to 50MB)
     * @param {PsychologicalHelpForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApiInterface
     */
    medicinePsychologicalHelpFormsCreate(data: PsychologicalHelpForm, options?: AxiosRequestConfig): AxiosPromise<PsychologicalHelpForm>;

}

/**
 * MedicineApi - object-oriented interface
 * @export
 * @class MedicineApi
 * @extends {BaseAPI}
 */
export class MedicineApi extends BaseAPI implements MedicineApiInterface {
    /**
     * Upload video file (MP4 format, up to 50MB)
     * @param {InterpreterHelpForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public medicineInterpreterHelpFormsCreate(data: InterpreterHelpForm, options?: AxiosRequestConfig) {
        return MedicineApiFp(this.configuration).medicineInterpreterHelpFormsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload video file (MP4 format, up to 50MB)
     * @param {MedicalOrganizationForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public medicineMedicalOrganizationFormsCreate(data: MedicalOrganizationForm, options?: AxiosRequestConfig) {
        return MedicineApiFp(this.configuration).medicineMedicalOrganizationFormsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [city] 
     * @param {number} [country] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public medicineMedicalOrganizationsList(city?: number, country?: number, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return MedicineApiFp(this.configuration).medicineMedicalOrganizationsList(city, country, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public medicineMedicalOrganizationsRead(slug: string, options?: AxiosRequestConfig) {
        return MedicineApiFp(this.configuration).medicineMedicalOrganizationsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload video file (MP4 format, up to 50MB)
     * @param {PsychologicalHelpForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public medicinePsychologicalHelpFormsCreate(data: PsychologicalHelpForm, options?: AxiosRequestConfig) {
        return MedicineApiFp(this.configuration).medicinePsychologicalHelpFormsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NewsArticlesApi - axios parameter creator
 * @export
 */
export const NewsArticlesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsArticlesArticlesList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/news-articles/articles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsArticlesArticlesRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('newsArticlesArticlesRead', 'slug', slug)
            const localVarPath = `/news-articles/articles/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsArticlesNewsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/news-articles/news/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsArticlesNewsRead: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('newsArticlesNewsRead', 'slug', slug)
            const localVarPath = `/news-articles/news/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsArticlesApi - functional programming interface
 * @export
 */
export const NewsArticlesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NewsArticlesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsArticlesArticlesList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsArticlesArticlesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsArticlesArticlesList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsArticlesArticlesRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsArticlesArticlesRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsArticlesNewsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsArticlesNewsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsArticlesNewsList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsArticlesNewsRead(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<News>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsArticlesNewsRead(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NewsArticlesApi - factory interface
 * @export
 */
export const NewsArticlesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NewsArticlesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsArticlesArticlesList(limit?: number, offset?: number, options?: any): AxiosPromise<NewsArticlesArticlesList200Response> {
            return localVarFp.newsArticlesArticlesList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsArticlesArticlesRead(slug: string, options?: any): AxiosPromise<Article> {
            return localVarFp.newsArticlesArticlesRead(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsArticlesNewsList(limit?: number, offset?: number, options?: any): AxiosPromise<NewsArticlesNewsList200Response> {
            return localVarFp.newsArticlesNewsList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug Leave blank to auto-generate a unique slug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsArticlesNewsRead(slug: string, options?: any): AxiosPromise<News> {
            return localVarFp.newsArticlesNewsRead(slug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NewsArticlesApi - interface
 * @export
 * @interface NewsArticlesApi
 */
export interface NewsArticlesApiInterface {
    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsArticlesApiInterface
     */
    newsArticlesArticlesList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<NewsArticlesArticlesList200Response>;

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsArticlesApiInterface
     */
    newsArticlesArticlesRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<Article>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsArticlesApiInterface
     */
    newsArticlesNewsList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<NewsArticlesNewsList200Response>;

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsArticlesApiInterface
     */
    newsArticlesNewsRead(slug: string, options?: AxiosRequestConfig): AxiosPromise<News>;

}

/**
 * NewsArticlesApi - object-oriented interface
 * @export
 * @class NewsArticlesApi
 * @extends {BaseAPI}
 */
export class NewsArticlesApi extends BaseAPI implements NewsArticlesApiInterface {
    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsArticlesApi
     */
    public newsArticlesArticlesList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return NewsArticlesApiFp(this.configuration).newsArticlesArticlesList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsArticlesApi
     */
    public newsArticlesArticlesRead(slug: string, options?: AxiosRequestConfig) {
        return NewsArticlesApiFp(this.configuration).newsArticlesArticlesRead(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsArticlesApi
     */
    public newsArticlesNewsList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return NewsArticlesApiFp(this.configuration).newsArticlesNewsList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} slug Leave blank to auto-generate a unique slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsArticlesApi
     */
    public newsArticlesNewsRead(slug: string, options?: AxiosRequestConfig) {
        return NewsArticlesApiFp(this.configuration).newsArticlesNewsRead(slug, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SponsorApi - axios parameter creator
 * @export
 */
export const SponsorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SponsorForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorSponsorFormsCreate: async (data: SponsorForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('sponsorSponsorFormsCreate', 'data', data)
            const localVarPath = `/sponsor/sponsor-forms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorSponsorsList: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sponsor/sponsors/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Collaboration Program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorSponsorsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sponsorSponsorsRead', 'id', id)
            const localVarPath = `/sponsor/sponsors/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SponsorApi - functional programming interface
 * @export
 */
export const SponsorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SponsorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SponsorForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sponsorSponsorFormsCreate(data: SponsorForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SponsorForm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sponsorSponsorFormsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sponsorSponsorsList(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SponsorSponsorsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sponsorSponsorsList(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Collaboration Program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sponsorSponsorsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollaborationProgram>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sponsorSponsorsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SponsorApi - factory interface
 * @export
 */
export const SponsorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SponsorApiFp(configuration)
    return {
        /**
         * 
         * @param {SponsorForm} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorSponsorFormsCreate(data: SponsorForm, options?: any): AxiosPromise<SponsorForm> {
            return localVarFp.sponsorSponsorFormsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorSponsorsList(limit?: number, offset?: number, options?: any): AxiosPromise<SponsorSponsorsList200Response> {
            return localVarFp.sponsorSponsorsList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Collaboration Program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorSponsorsRead(id: number, options?: any): AxiosPromise<CollaborationProgram> {
            return localVarFp.sponsorSponsorsRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SponsorApi - interface
 * @export
 * @interface SponsorApi
 */
export interface SponsorApiInterface {
    /**
     * 
     * @param {SponsorForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorApiInterface
     */
    sponsorSponsorFormsCreate(data: SponsorForm, options?: AxiosRequestConfig): AxiosPromise<SponsorForm>;

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorApiInterface
     */
    sponsorSponsorsList(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<SponsorSponsorsList200Response>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Collaboration Program.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorApiInterface
     */
    sponsorSponsorsRead(id: number, options?: AxiosRequestConfig): AxiosPromise<CollaborationProgram>;

}

/**
 * SponsorApi - object-oriented interface
 * @export
 * @class SponsorApi
 * @extends {BaseAPI}
 */
export class SponsorApi extends BaseAPI implements SponsorApiInterface {
    /**
     * 
     * @param {SponsorForm} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorApi
     */
    public sponsorSponsorFormsCreate(data: SponsorForm, options?: AxiosRequestConfig) {
        return SponsorApiFp(this.configuration).sponsorSponsorFormsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorApi
     */
    public sponsorSponsorsList(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return SponsorApiFp(this.configuration).sponsorSponsorsList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this Collaboration Program.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorApi
     */
    public sponsorSponsorsRead(id: number, options?: AxiosRequestConfig) {
        return SponsorApiFp(this.configuration).sponsorSponsorsRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}


